/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Cancel,
  CancelInterface,
} from "../../../../../contracts/services/orderbook/facets/Cancel";

const _abi = [
  {
    inputs: [],
    name: "cancel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "liquidation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101fc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637f0d0f6b1461003b578063ea8a1af014610057575b600080fd5b610055600480360381019061005091906100ff565b610061565b005b61005f610078565b005b6100758160006100ab90919063ffffffff16565b50565b60008060020154111561009f576000600201600081546100979061015b565b919050819055505b60008060030181905550565b6002816100b89190610184565b82600301819055505050565b600080fd5b6000819050919050565b6100dc816100c9565b81146100e757600080fd5b50565b6000813590506100f9816100d3565b92915050565b600060208284031215610115576101146100c4565b5b6000610123848285016100ea565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610166826100c9565b9150600082036101795761017861012c565b5b600182039050919050565b600061018f826100c9565b915061019a836100c9565b92508282026101a8816100c9565b915082820484148315176101bf576101be61012c565b5b509291505056fea264697066735822122027e881267b8282132ad0cc99851d6b3e73c5e6f4f1b55ee9c5c33bb546729b2d64736f6c63430008140033";

type CancelConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CancelConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Cancel__factory extends ContractFactory {
  constructor(...args: CancelConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Cancel & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Cancel__factory {
    return super.connect(runner) as Cancel__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CancelInterface {
    return new Interface(_abi) as CancelInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Cancel {
    return new Contract(address, _abi, runner) as unknown as Cancel;
  }
}
