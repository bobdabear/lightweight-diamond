/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Get,
  GetInterface,
} from "../../../../../contracts/services/orderbook/facets/Get";

const _abi = [
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTick",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060e98061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806398d5fdca146037578063df8ad814146051575b600080fd5b603d606b565b60405160489190609a565b60405180910390f35b60576077565b60405160629190609a565b60405180910390f35b60008060030154905090565b60008060020154905090565b6000819050919050565b6094816083565b82525050565b600060208201905060ad6000830184608d565b9291505056fea26469706673582212204d0203b983ebcceada3313c26231324395530511ca156fd4d1f0144e6db3b52e64736f6c63430008140033";

type GetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Get__factory extends ContractFactory {
  constructor(...args: GetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Get & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Get__factory {
    return super.connect(runner) as Get__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GetInterface {
    return new Interface(_abi) as GetInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Get {
    return new Contract(address, _abi, runner) as unknown as Get;
  }
}
