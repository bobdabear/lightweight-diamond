/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Create",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create__factory>;
    getContractFactory(
      name: "Get",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Get__factory>;
    getContractFactory(
      name: "IMarket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarket__factory>;
    getContractFactory(
      name: "Market",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Market__factory>;
    getContractFactory(
      name: "Events",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Events__factory>;
    getContractFactory(
      name: "Cancel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Cancel__factory>;
    getContractFactory(
      name: "Get",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Get__factory>;
    getContractFactory(
      name: "Order",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Order__factory>;
    getContractFactory(
      name: "IOrderbook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOrderbook__factory>;
    getContractFactory(
      name: "Orderbook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Orderbook__factory>;
    getContractFactory(
      name: "ERROR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERROR__factory>;
    getContractFactory(
      name: "DiamondContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondContract__factory>;
    getContractFactory(
      name: "DiamondContractManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondContractManager__factory>;
    getContractFactory(
      name: "DiamondFacade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondFacade__factory>;
    getContractFactory(
      name: "IDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamond__factory>;
    getContractFactory(
      name: "IDiamondCut",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamondCut__factory>;
    getContractFactory(
      name: "DiamondAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondAuth__factory>;
    getContractFactory(
      name: "DiamondBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondBase__factory>;
    getContractFactory(
      name: "DiamondLoupe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondLoupe__factory>;
    getContractFactory(
      name: "DiamondFacadeAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondFacadeAuth__factory>;
    getContractFactory(
      name: "DiamondFacadeBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondFacadeBase__factory>;
    getContractFactory(
      name: "DiamondFacadeLoupe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondFacadeLoupe__factory>;

    getContractAt(
      name: "Create",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Create>;
    getContractAt(
      name: "Get",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Get>;
    getContractAt(
      name: "IMarket",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarket>;
    getContractAt(
      name: "Market",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Market>;
    getContractAt(
      name: "Events",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Events>;
    getContractAt(
      name: "Cancel",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Cancel>;
    getContractAt(
      name: "Get",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Get>;
    getContractAt(
      name: "Order",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Order>;
    getContractAt(
      name: "IOrderbook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOrderbook>;
    getContractAt(
      name: "Orderbook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Orderbook>;
    getContractAt(
      name: "ERROR",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERROR>;
    getContractAt(
      name: "DiamondContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondContract>;
    getContractAt(
      name: "DiamondContractManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondContractManager>;
    getContractAt(
      name: "DiamondFacade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondFacade>;
    getContractAt(
      name: "IDiamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamond>;
    getContractAt(
      name: "IDiamondCut",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamondCut>;
    getContractAt(
      name: "DiamondAuth",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondAuth>;
    getContractAt(
      name: "DiamondBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondBase>;
    getContractAt(
      name: "DiamondLoupe",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondLoupe>;
    getContractAt(
      name: "DiamondFacadeAuth",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondFacadeAuth>;
    getContractAt(
      name: "DiamondFacadeBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondFacadeBase>;
    getContractAt(
      name: "DiamondFacadeLoupe",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondFacadeLoupe>;

    deployContract(
      name: "Create",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Create>;
    deployContract(
      name: "Get",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Get>;
    deployContract(
      name: "IMarket",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarket>;
    deployContract(
      name: "Market",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Market>;
    deployContract(
      name: "Events",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Events>;
    deployContract(
      name: "Cancel",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Cancel>;
    deployContract(
      name: "Get",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Get>;
    deployContract(
      name: "Order",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Order>;
    deployContract(
      name: "IOrderbook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrderbook>;
    deployContract(
      name: "Orderbook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Orderbook>;
    deployContract(
      name: "ERROR",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERROR>;
    deployContract(
      name: "DiamondContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondContract>;
    deployContract(
      name: "DiamondContractManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondContractManager>;
    deployContract(
      name: "DiamondFacade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondFacade>;
    deployContract(
      name: "IDiamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamond>;
    deployContract(
      name: "IDiamondCut",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondCut>;
    deployContract(
      name: "DiamondAuth",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondAuth>;
    deployContract(
      name: "DiamondBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondBase>;
    deployContract(
      name: "DiamondLoupe",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondLoupe>;
    deployContract(
      name: "DiamondFacadeAuth",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondFacadeAuth>;
    deployContract(
      name: "DiamondFacadeBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondFacadeBase>;
    deployContract(
      name: "DiamondFacadeLoupe",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondFacadeLoupe>;

    deployContract(
      name: "Create",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Create>;
    deployContract(
      name: "Get",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Get>;
    deployContract(
      name: "IMarket",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarket>;
    deployContract(
      name: "Market",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Market>;
    deployContract(
      name: "Events",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Events>;
    deployContract(
      name: "Cancel",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Cancel>;
    deployContract(
      name: "Get",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Get>;
    deployContract(
      name: "Order",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Order>;
    deployContract(
      name: "IOrderbook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrderbook>;
    deployContract(
      name: "Orderbook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Orderbook>;
    deployContract(
      name: "ERROR",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERROR>;
    deployContract(
      name: "DiamondContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondContract>;
    deployContract(
      name: "DiamondContractManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondContractManager>;
    deployContract(
      name: "DiamondFacade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondFacade>;
    deployContract(
      name: "IDiamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamond>;
    deployContract(
      name: "IDiamondCut",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondCut>;
    deployContract(
      name: "DiamondAuth",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondAuth>;
    deployContract(
      name: "DiamondBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondBase>;
    deployContract(
      name: "DiamondLoupe",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondLoupe>;
    deployContract(
      name: "DiamondFacadeAuth",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondFacadeAuth>;
    deployContract(
      name: "DiamondFacadeBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondFacadeBase>;
    deployContract(
      name: "DiamondFacadeLoupe",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondFacadeLoupe>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
